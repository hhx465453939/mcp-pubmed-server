---
globs: *.js
description: PubMed API集成和数据处理规范
---

# PubMed API集成规范

## API端点配置
```javascript
const PUBMED_BASE_URL = 'https://eutils.ncbi.nlm.nih.gov/entrez/eutils';
const RATE_LIMIT_DELAY = 334; // PubMed限制：3请求/秒
const REQUEST_TIMEOUT = 30000; // 30秒超时
```

## 搜索查询构建
```javascript
// 搜索URL构建模式
const searchUrl = new URL(`${PUBMED_BASE_URL}/esearch.fcgi`);
searchUrl.searchParams.append('db', 'pubmed');
searchUrl.searchParams.append('term', searchQuery);
searchUrl.searchParams.append('retmax', maxResults.toString());
searchUrl.searchParams.append('retmode', 'json');
searchUrl.searchParams.append('sort', sortMap[sortBy] || 'relevance');
searchUrl.searchParams.append('tool', 'mcp-pubmed-server');
searchUrl.searchParams.append('email', process.env.PUBMED_EMAIL);
```

## 数据获取模式

### 1. 搜索文献ID
```javascript
// 使用 esearch.fcgi 获取PMID列表
const response = await fetch(searchUrl.toString(), { timeout: REQUEST_TIMEOUT });
const data = await response.json();
const ids = data.esearchresult?.idlist || [];
```

### 2. 获取文献详情
```javascript
// 使用 esummary.fcgi 获取文献详情
const summaryUrl = new URL(`${PUBMED_BASE_URL}/esummary.fcgi`);
summaryUrl.searchParams.append('db', 'pubmed');
summaryUrl.searchParams.append('id', ids.join(','));
summaryUrl.searchParams.append('retmode', 'json');
```

### 3. 获取完整摘要
```javascript
// 使用 efetch.fcgi 获取完整摘要
const abstractUrl = new URL(`${PUBMED_BASE_URL}/efetch.fcgi`);
abstractUrl.searchParams.append('db', 'pubmed');
abstractUrl.searchParams.append('id', pmid);
abstractUrl.searchParams.append('rettype', 'abstract');
abstractUrl.searchParams.append('retmode', 'text');
```

## 数据格式化

### 文献对象结构
```javascript
const article = {
    pmid: id,
    title: article.title || 'No title',
    authors: article.authors?.map(author => author.name) || [],
    journal: article.source || 'No journal',
    publicationDate: article.pubdate || 'No date',
    volume: article.volume || '',
    issue: article.issue || '',
    pages: article.pages || '',
    abstract: article.abstract || null,
    doi: article.elocationid || '',
    url: `https://pubmed.ncbi.nlm.nih.gov/${id}/`,
    publicationTypes: article.pubtype || [],
    meshTerms: article.meshterms || [],
    keywords: article.keywords || []
};
```

## LLM优化输出格式

### 标准格式
```javascript
const structured = {
    pmid: article.pmid,
    title: article.title,
    citation: `${authors} ${journal}, ${date}`,
    url: article.url,
    abstract: this.truncateText(article.abstract, ABSTRACT_MAX_CHARS),
    key_points: this.extractKeyPoints(article.abstract),
    keywords: article.meshTerms?.slice(0, 8) || []
};
```

### 摘要处理
```javascript
// 摘要截断模式
const ABSTRACT_MODE = (process.env.ABSTRACT_MODE || 'quick').toLowerCase();
const ABSTRACT_MAX_CHARS = ABSTRACT_MODE === 'deep' ? 6000 : 1500;

// 摘要截断函数
truncateText(text, maxLength) {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength - 3) + "...";
}
```

## 错误处理模式

### API错误处理
```javascript
try {
    const response = await fetch(url, { timeout: REQUEST_TIMEOUT });
    if (!response.ok) {
        throw new Error(`PubMed API failed: ${response.statusText}`);
    }
    return await response.json();
} catch (error) {
    console.error(`[PubMed API] Error:`, error.message);
    throw new Error(`Failed to fetch data: ${error.message}`);
}
```

### 数据验证
```javascript
// 验证PMID格式
if (!pmid || !/^\d+$/.test(pmid)) {
    throw new Error(`Invalid PMID format: ${pmid}`);
}

// 验证结果数量
if (maxResults > 100) {
    throw new Error("Maximum results cannot exceed 100");
}
```

## 缓存策略

### 文件缓存模式
```javascript
// 论文缓存路径
getPaperCachePath(pmid) {
    return path.join(PAPER_CACHE_DIR, `${pmid}.json`);
}

// 缓存数据结构
const cacheData = {
    version: CACHE_VERSION,
    pmid: pmid,
    timestamp: Date.now(),
    data: articleData
};
```

### 缓存过期处理
```javascript
// 检查缓存过期
if (Date.now() - cachedData.timestamp > PAPER_CACHE_EXPIRY) {
    fs.unlinkSync(cachePath);
    return null;
}
```