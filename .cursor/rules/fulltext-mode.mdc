---
globs: *.js
description: 全文模式开发和配置规范
---

# 全文模式开发规范

## 全文模式架构

### 环境变量配置
```javascript
// 全文模式配置
const FULLTEXT_MODE = (process.env.FULLTEXT_MODE || 'disabled').toLowerCase();
const FULLTEXT_ENABLED = FULLTEXT_MODE === 'enabled' || FULLTEXT_MODE === 'auto';
const FULLTEXT_AUTO_DOWNLOAD = FULLTEXT_MODE === 'auto';
```

### 模式说明
- `disabled`: 禁用全文功能（默认）
- `enabled`: 启用全文检测，手动下载
- `auto`: 启用全文检测，自动下载可用的OA论文

## 全文检测流程

### 1. 开放获取检测
```javascript
// 检测OA论文和全文可用性
async detectOpenAccess(article) {
    const oaInfo = {
        isOpenAccess: false,
        sources: [],
        downloadUrl: null,
        pmcid: null,
        doi: article.doi
    };
    
    // 1. 检查PMC免费全文
    // 2. 检查DOI的Unpaywall
    // 3. 检查出版商直接OA
    
    return oaInfo;
}
```

### 2. 多源检测策略
```javascript
// PMC检测
async checkPMCContent(pmid) {
    const pmcUrl = `${PMC_BASE_URL}/?term=${pmid}`;
    // 检查PMC免费全文可用性
}

// Unpaywall检测
async checkUnpaywall(doi) {
    const unpaywallUrl = `${UNPAYWALL_API_URL}/${doi}?email=${email}`;
    // 检查Unpaywall数据库
}

// 出版商直接检测
async checkPublisherOA(doi) {
    const doiUrl = `https://doi.org/${doi}`;
    // 检查出版商网站免费PDF
}
```

## PDF下载和缓存

### 下载配置
```javascript
// PDF下载配置
const FULLTEXT_CACHE_DIR = path.join(CACHE_DIR, 'fulltext');
const PDF_CACHE_EXPIRY = 90 * 24 * 60 * 60 * 1000; // 90天过期
const MAX_PDF_SIZE = 50 * 1024 * 1024; // 50MB最大PDF大小
```

### 下载流程
```javascript
// PDF下载方法
async downloadPDF(pmid, downloadUrl, oaInfo) {
    const response = await fetch(downloadUrl, {
        timeout: 60000, // 60秒超时
        headers: {
            'User-Agent': 'Mozilla/5.0 (compatible; PubMed-MCP-Server/2.0)',
            'Accept': 'application/pdf,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
        }
    });
    
    // 检查文件大小限制
    // 保存PDF文件
    // 更新全文索引
}
```

### 缓存管理
```javascript
// 检查PDF是否已缓存
isPDFCached(pmid) {
    const pdfPath = path.join(FULLTEXT_CACHE_DIR, `${pmid}.pdf`);
    if (fs.existsSync(pdfPath)) {
        const stats = fs.statSync(pdfPath);
        const age = Date.now() - stats.mtime.getTime();
        if (age < PDF_CACHE_EXPIRY) {
            return { cached: true, filePath: pdfPath, fileSize: stats.size };
        }
    }
    return { cached: false };
}
```

## 全文工具

### 1. pubmed_detect_fulltext
```javascript
// 检测文献的开放获取状态和全文可用性
{
    name: "pubmed_detect_fulltext",
    description: "检测文献的开放获取状态和全文可用性",
    inputSchema: {
        type: "object",
        properties: {
            pmid: { type: "string", description: "PubMed文献ID" },
            auto_download: { type: "boolean", description: "是否自动下载可用的全文", default: false }
        },
        required: ["pmid"]
    }
}
```

### 2. pubmed_download_fulltext
```javascript
// 下载指定文献的全文PDF（如果可用）
{
    name: "pubmed_download_fulltext",
    description: "下载指定文献的全文PDF（如果可用）",
    inputSchema: {
        type: "object",
        properties: {
            pmid: { type: "string", description: "PubMed文献ID" },
            force_download: { type: "boolean", description: "是否强制重新下载（即使已缓存）", default: false }
        },
        required: ["pmid"]
    }
}
```

### 3. pubmed_fulltext_status
```javascript
// 获取全文缓存状态和统计信息
{
    name: "pubmed_fulltext_status",
    description: "获取全文缓存状态和统计信息",
    inputSchema: {
        type: "object",
        properties: {
            action: { type: "string", enum: ["stats", "list", "clean", "clear"], default: "stats" },
            pmid: { type: "string", description: "指定PMID（仅用于list操作）" }
        }
    }
}
```

## 全文索引管理

### 索引结构
```javascript
// 全文索引数据结构
const indexData = {
    version: CACHE_VERSION,
    created: new Date().toISOString(),
    fulltext_papers: {
        [pmid]: {
            pmid: pmid,
            downloadUrl: downloadUrl,
            sources: oaInfo.sources,
            filePath: `${pmid}.pdf`,
            fileSize: buffer.length,
            downloaded: new Date().toISOString(),
            pmcid: oaInfo.pmcid,
            doi: oaInfo.doi,
            cached: new Date().toISOString()
        }
    },
    stats: {
        totalPDFs: 0,
        totalSize: 0,
        lastCleanup: new Date().toISOString()
    }
};
```

### 索引操作
```javascript
// 更新全文索引
async updateFullTextIndex(pmid, fulltextInfo) {
    const indexPath = path.join(FULLTEXT_CACHE_DIR, 'index.json');
    const indexData = JSON.parse(fs.readFileSync(indexPath, 'utf8'));
    
    indexData.fulltext_papers[pmid] = { ...fulltextInfo, cached: new Date().toISOString() };
    indexData.stats.totalPDFs = Object.keys(indexData.fulltext_papers).length;
    indexData.stats.totalSize = Object.values(indexData.fulltext_papers)
        .reduce((sum, paper) => sum + (paper.fileSize || 0), 0);
    
    fs.writeFileSync(indexPath, JSON.stringify(indexData, null, 2));
}
```

## 错误处理模式

### 全文检测错误
```javascript
// 检测过程中的错误处理
try {
    const oaInfo = await this.detectOpenAccess(article);
    // 处理检测结果
} catch (error) {
    console.error(`[FullText] Error detecting OA for ${article.pmid}:`, error.message);
    return { isOpenAccess: false, error: error.message };
}
```

### 下载错误处理
```javascript
// PDF下载错误处理
try {
    const downloadResult = await this.downloadPDF(pmid, downloadUrl, oaInfo);
    return downloadResult;
} catch (error) {
    console.error(`[FullText] Error downloading PDF for ${pmid}:`, error.message);
    return { success: false, error: error.message };
}
```

## 性能优化

### 缓存策略
- **文件缓存**: PDF文件本地存储，90天过期
- **索引缓存**: JSON索引文件，实时更新
- **重复检测**: 避免重复下载已缓存的PDF

### 下载限制
- **文件大小**: 最大50MB
- **超时设置**: 60秒下载超时
- **并发控制**: 单线程下载，避免API限制

### 清理机制
```javascript
// 清理过期PDF文件
case "clean":
    let cleaned = 0;
    for (const [pmid, info] of Object.entries(indexData.fulltext_papers)) {
        const pdfPath = path.join(FULLTEXT_CACHE_DIR, `${pmid}.pdf`);
        if (fs.existsSync(pdfPath)) {
            const stats = fs.statSync(pdfPath);
            const age = now - stats.mtime.getTime();
            if (age > PDF_CACHE_EXPIRY) {
                fs.unlinkSync(pdfPath);
                delete indexData.fulltext_papers[pmid];
                cleaned++;
            }
        }
    }
```

## 使用场景

### 1. 学术研究
- 自动检测和下载相关文献的全文
- 建立本地文献库
- 支持离线阅读和分析

### 2. 文献综述
- 批量获取相关领域文献
- 自动筛选开放获取论文
- 建立专题文献集合

### 3. 事实核查
- 获取原始文献进行验证
- 支持深度文献分析
- 提供完整的引用链