---
globs: *.js
description: JavaScript编码规范和最佳实践
---

# JavaScript编码规范

## 代码风格
- 使用 **ES6+ 模块语法** (`import/export`)
- 使用 **async/await** 而非 Promise.then()
- 使用 **const/let** 而非 var
- 使用 **模板字符串** 而非字符串拼接

## 错误处理模式
```javascript
// 标准错误处理模式
try {
    const result = await someAsyncOperation();
    return { success: true, data: result };
} catch (error) {
    console.error(`[Module] Error:`, error.message);
    throw new Error(`Operation failed: ${error.message}`);
}
```

## 缓存管理模式
```javascript
// 缓存键生成
getCacheKey(query, maxResults, daysBack, sortBy) {
    return `${query}|${maxResults}|${daysBack}|${sortBy}`;
}

// 缓存检查
getFromCache(key) {
    const cached = this.cache.get(key);
    if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
        return cached.data;
    }
    return null;
}
```

## API调用模式
```javascript
// 速率限制
async enforceRateLimit() {
    const now = Date.now();
    const timeSinceLastRequest = now - this.lastRequestTime;
    if (timeSinceLastRequest < RATE_LIMIT_DELAY) {
        await new Promise(resolve => setTimeout(resolve, RATE_LIMIT_DELAY - timeSinceLastRequest));
    }
    this.lastRequestTime = Date.now();
}
```

## 工具方法命名
- `handle*` - 处理工具调用
- `fetch*` - 获取外部数据
- `format*` - 格式化输出
- `extract*` - 提取信息
- `clean*` - 清理操作

## 日志规范
```javascript
// 使用 console.error 输出调试信息（MCP服务器特性）
console.error(`[Module] Operation: ${operation} (${param})`);
console.error(`[Cache] Hit for key: ${key.substring(0, 50)}...`);
```

## 环境变量使用
```javascript
// 环境变量访问模式
const API_KEY = process.env.PUBMED_API_KEY;
const EMAIL = process.env.PUBMED_EMAIL || 'user@example.com';
const ABSTRACT_MODE = (process.env.ABSTRACT_MODE || 'quick').toLowerCase();
```